/******************************************************************************
 * File: libbricks.inc
 * Description:
 *      Library of macros for creating brick walls supporting different
 * brick layout patterns.
 ******************************************************************************/

#ifndef(Libbricks_Inc_Temp)

#declare Libbricks_Inc_Temp = version;
#version 3.8;

#ifdef(View_POV_Include_Stack)
    #debug "including libbricks.inc\n"
#end                     

//=============================================================================
// Required Include Files
//
// All files required for the library to work should be included here.  There
// should be no assumption that any given include file is included prior to
// the library.inc file.
//
// Further, to preserve this library as something that can be packaged up to
// export to news.povray.org, only include standard POV-Ray include files or
// other files in this library directory.
//
#include "libisoshapes.inc"
#include "libgeom.inc"
#include "libfn.inc"

// End Required Include Files
//=============================================================================

//=============================================================================
// Brick and Brick Wall Specifications
//

//-----------------------------------------------------------------------------
// Brick_spec_create(BrickSize,MortarSize,ShapeFn)
//
// The BrickSize should be a 3D Coordinate where the X dimension represents
// the stretcher width, the y dimension is the height of the brick, and the
// z dimension is the header width.
//
// The MortarSize is the thickness of the mortar as applied to right, top,
// and back edges of the brick.
//
// The ShapeFn is an isosurface function(x,y,z) that defines the shape of the brick
// when its lower, left, front corner is at <0,0,0>
//
// For most brick layouts to work correctly:
//      BrickSize.x = 2*BrickSize.z + MortarSize
//
#macro Brick_spec_create(BrickSize,MortarSize,ShapeFn)
    #local _spec    = dictionary {
        .brick_sz:  BrickSize,
        .mortar_sz: MortarSize,
        .unit_sz:   BrickSize + MortarSize,
        .shape_fn:  ShapeFn
    }
    ;
    
    _spec    
#end

// End Brick_spec_create
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_spec_turn_sideways(BrickSpec)
//
#macro Brick_spec_turn_sideways(BrickSpec)
    #local _bsts_brick_fn1  = Rotate_fn(BrickSpec.shape_fn, <0, -radians(90), 0>)
    #local _bsts_brick_fn   = Translate_fn(_bsts_brick_fn1, <BrickSpec.brick_sz.z, 0, 0>)
    #local _spec    = Brick_spec_create(<BrickSpec.brick_sz.z,BrickSpec.brick_sz.y,BrickSpec.brick_sz.x>,BrickSpec.mortar_sz, _bsts_brick_fn);
    
    _spec
#end

// End Brick_spec_turn_sideways
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_spec_bat(BrickSpec,BatSize)
//
#macro Brick_spec_bat(BrickSpec,BatSize)
    #local _bat_sz      = <BatSize, BrickSpec.brick_sz.y, BrickSpec.brick_sz.z>;
    #local _bat_maxx    = _bat_sz.x;
    #local _brick_fn    = BrickSpec.shape_fn;
    #local _bat_fn      = function(x,y,z) {
        max(
            x - _bat_maxx,
            BrickSpec.shape_fn(x,y,z)
        )        
    }
        
    #local _spec    = Brick_spec_create(_bat_sz,BrickSpec.mortar_sz,_bat_fn);
    
    _spec
#end

// End Brick_spec_bat(BrickSpec,BatSize)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity)
//
#declare Brick_wall_end_type_flush  = 0;
#declare Brick_wall_end_type_corner = 1;
#macro Brick_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity)
    // TODO: Fix this to include the half-brick wall thickness
    #local _size    = <Width*BrickSpec.unit_sz.x-BrickSpec.mortar_sz, Height*BrickSpec.unit_sz.y, BrickSpec.brick_sz.z>;
    
    #local _wall_spec   = dictionary {
        .wid:           Width,
        .height:        Height,
        .sz:            _size,
        .brick_spec:    BrickSpec,
        .left_end:      LeftEnd,
        .right_end:     RightEnd,       
        .course_parity: CourseParity
    }
    ;
    
    #debug concat(
        "_wall_spec = \n",
        "   .brick_spec.brick_sz: <", vstr(3,_wall_spec.brick_spec.brick_sz, ",", 0, 6), ">\n",
        "   .brick_spec.mortar_sz: ", str(_wall_spec.brick_spec.mortar_sz, 0, 6), "\n",
        "   .sz: <", vstr(3, _wall_spec.sz, ",", 0, 6), ">\n"
    )
    
    _wall_spec
#end

// End Brick_wall_spec_create
//-----------------------------------------------------------------------------

// End Brick and Brick Wall Specifications
//=============================================================================

//=============================================================================
// Generic Brick Functions
//

//-----------------------------------------------------------------------------
// Brick_unit_index_fn(UnitSize)
//
// Generates a function(v) that computes the 0-based unit index for the given
// unit size given the value v.
//
#macro Brick_unit_index_fn(UnitSize)
    function(v) {
        select(v,
            (int(v/UnitSize)-1),
            int(v/UnitSize)
        )    
    }
#end

// End Brick_unit_index_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_unit_offset_fn(UnitSize)
//
// Generates a function(v) that computes the 0-based unit offset for the given
// unit size given the value v.
//
#macro Brick_unit_offset_fn(UnitSize)
    function(v) {
        select(v,
            v - (int(v/UnitSize)-1)*UnitSize,
            v - int(v/UnitSize)*UnitSize
        )    
    }
#end

// End Brick_unit_offset_fn
//-----------------------------------------------------------------------------

// End Generic Brick Functions
//=============================================================================

//=============================================================================
// Mortar and Joint Functions
//

//-----------------------------------------------------------------------------
// Brick_wall_mortar_shape_fn(WallSpec,BrickSpec)
//
#macro Brick_wall_mortar_shape_fn(WallSpec,BrickSpec)
    #local _bsbwmv_brick_fn = Translate_fn(BrickSpec.shape_fn, <0, BrickSpec.mortar_sz, 0>)
    #local _zb  = BrickSpec.unit_sz.z/2;
    function (x,y,z) {
        -min(
            _bsbwmv_brick_fn(x,y,_zb),
        #ifdef(WallSpec.vert_joint_fn)
            #local _bsbwmv_vmortar_fn   = Translate_fn(WallSpec.vert_joint_fn, <BrickSpec.brick_sz.x + BrickSpec.mortar_sz/2, 0, 0>);
            _bsbwmv_vmortar_fn(x,y,z),
        #end
        #ifdef(WallSpec.horiz_joint_fn)
            #local _bsbwmv_hmortar_fn   = Translate_fn(WallSpec.horiz_joint_fn,<0, BrickSpec.mortar_sz/2, 0>);
            _bsbwmv_hmortar_fn(x,y,z),
        #end
            999999
        )
    }
#end

// End Brick_wall_mortar_shape_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_
//-----------------------------------------------------------------------------
// Brick_wall_raked_joint_fn(BrickSpec,Depth,Vertical)
//
#macro Brick_wall_raked_joint_fn(BrickSpec,Depth,Vertical)
    function(x,y,z) {
        max(
            #if(Vertical)
            abs(x) - BrickSpec.mortar_sz/2,
            MortarSize - y,
            #else
            abs(y) - BrickSpec.mortar_sz/2,
            #end
            z - Depth
        )    
    }    
    
#end

// End Brick_wall_raked_joint_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_concave_joint_fn(BrickSpec,Depth,Vertical)
//
#macro Brick_wall_concave_joint_fn(BrickSpec,Depth,Vertical)
    #local _radius  = ChordHeight2Radius(Brickspec.mortar_sz,Depth);
    #local _zoffset = -_radius + Depth;
    #debug concat("_radius=", str(_radius, 0, 3), "; _zoffset=", str(_zoffset, 0, 3), "\n")
    function(x,y,z) {
        max(
            #if(Vertical)
            abs(x) - Brickspec.mortar_sz/2,
            Brickspec.mortar_sz - y,
            sqrt(x*x + pow(z - _zoffset, 2)) - _radius
            #else
            abs(y) - Brickspec.mortar_sz/2,
            sqrt(y*y + pow(z - _zoffset, 2)) - _radius
            #end
        )        
    }
#end

// End Brick_wall_concave_joint_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_grapevine_joint_fn(BrickSpec,Depth,Radius,Vertical)
//
#macro Brick_wall_grapevine_joint_fn(BrickSpec,Depth,Radius,Vertical)
    #local _rcenter = Depth - Radius;
    function(x,y,z) {
        max(
            #if(Vertical)
            abs(x) - Radius,
            BrickSpec.mortar_sz - y,
            min(
                z - _rcenter,
                sqrt(x*x + pow(z - _rcenter, 2)) - Radius
            )    
            #else
            abs(y) - Radius,
            min(
                z - _rcenter,
                sqrt(y*y + pow(z - _rcenter, 2)) - Radius
            )    
            #end
        )    
    }
#end

// End Brick_wall_grapevine_joint_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_vee_joint_fn(BrickSpec,Depth,Vertical)
//
#macro Brick_wall_vee_joint_fn(BrickSpec,Depth,Vertical)
    #local _slope   = 2*Depth/MortarSize;
    function(x,y,z) {
        max(
            #if(Vertical)
            abs(x) - Brickspec.mortar_sz/2, 
            Brickspec.mortar_sz/2 - y,
            z - (Depth - abs(x)*_slope)
            #else
            abs(y) - Brickspec.mortar_sz/2,
            z - (Depth - abs(y)*_slope)
            #end
        )    
    }
#end

// End Brick_wall_vee_joint_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_weather_hjoint_fn(BrickSpec,Depth)
//
#macro Brick_wall_weather_hjoint_fn(BrickSpec,Depth)
    #local _slope   = Depth/MortarSize;
    function(x,y,z) {
        max(
            abs(y) - BrickSpec.mortar_sz/2,
            z - (y+BrickSpec.mortar_sz/2)*_slope
        )
    }
#end

// End Brick_wall_weather_hjoint_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_wall_struck_hjoint_fn(MortarSize,Depth)
//
#macro Brick_wall_struck_hjoint_fn(BrickSpec,Depth)
    #local _slope   = Depth/MortarSize;
    function(x,y,z) {
        max(
            abs(y) - BrickSpec.mortar_sz/2,
            z - (Depth - (y+BrickSpec.mortar_sz/2)*_slope)
        )
    }
#end

// End Brick_wall_struck_hjoint_fn
//-----------------------------------------------------------------------------

// End Mortar and Joint Functions
//=============================================================================

//=============================================================================
// Stretcher Bond Walls
//
// To define a simple stretcher bond wall, all you need is a single brick
// specification, which defines the stretcher and header bricks.  The ends
// are specified as corners or flush ends, which determines whether a header
// is placed at the end or it is left open for the perpendicular wall to fill
// with a stretcher.
//

//-----------------------------------------------------------------------------
// Brick_stretcher_bond_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity)
//
#macro Brick_stretcher_bond_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity)
    Brick_raking_stretcher_bond_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity,0)
#end

#macro Brick_raking_stretcher_bond_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity,Rake)
    #local _wall_spec                       = Brick_wall_spec_create(Width,Height,BrickSpec,LeftEnd,RightEnd,CourseParity);
    #local _wall_spec.rake                  = Rake;
    
    #if (Rake > 0)
        #local _wall_spec.even_left_sz      = (1-Rake)*BrickSpec.brick_sz.x + BrickSpec.mortar_sz;
        #local _wall_spec.even_right_sz     = (1-Rake)*BrickSpec.brick_sz.x;
        #local _even_remaining_space        = _wall_spec.sz.x - (_wall_spec.even_left_sz + _wall_spec.even_right_sz);
        #local _even_brick_space            = floor(_even_remaining_space/BrickSpec.unit_sz.x)*BrickSpec.unit_sz.x;
        #local _even_gap                    = _even_remaining_space - _even_brick_space;
        #if (_even_gap > 0.0001)
            #local _wall_spec.even_right_bat_sz = _even_gap;
        #else
            #local _wall_spec.even_right_bat_sz = 0;
        #end
        
        #if (LeftEnd = Brick_wall_end_type_corner)
            #local _wall_spec.odd_left_sz   = BrickSpec.unit_sz.z;
        #else
            #local _wall_spec.odd_left_sz   = (1 - 2*Rake)*BrickSpec.brick_sz.x + BrickSpec.mortar_sz;
        #end
        #if (RightEnd = Brick_wall_end_type_corner)
            #local _wall_spec.odd_right_sz  = BrickSpec.brick_sz.z;
        #else
            #local _wall_spec.odd_right_sz  = (1 - 2*Rake)*BrickSpec.brick_sz.x;
        #end
        
    #else
        #local _wall_spec.even_left_sz      = 0;
        #local _wall_spec.even_right_sz     = 0;
        #local _wall_spec.even_right_bat_sz = 0;
        
        #if (LeftEnd = Brick_wall_end_type_corner)
            #local _wall_spec.odd_left_sz   = BrickSpec.unit_sz.z;
        #else
            #local _wall_spec.odd_left_sz   = 0.5*BrickSpec.brick_sz.x + BrickSpec.mortar_sz;
        #end
        #if (RightEnd = Brick_wall_end_type_corner)
            #local _wall_spec.odd_right_sz  = BrickSpec.brick_sz.z;
        #else
            #local _wall_spec.odd_right_sz  = 0.5*BrickSpec.brick_sz.x - BrickSpec.mortar_sz;
        #end                
    #end
    
    #local _odd_remaining_space = _wall_spec.sz.x - (_wall_spec.odd_left_sz + _wall_spec.odd_right_sz);
    #local _odd_brick_space     = floor(_odd_remaining_space/BrickSpec.unit_sz.x)*BrickSpec.unit_sz.x;
    #local _odd_gap             = _odd_remaining_space - _odd_brick_space;
    #if (_odd_gap > 0.0001)
        #local _wall_spec.odd_left_bat_sz   = _odd_gap;
    #else
        #local _wall_spec.odd_left_bat_sz   = 0;
    #end
    
    #debug concat(
        "_stretcher_wall_spec = \n",
        "   .rake: ", str(Rake,0,6), "\n",
        "   .even_left_sz: ", str(_wall_spec.even_left_sz, 0, 6), "\n",
        "   .even_right_sz: ", str(_wall_spec.even_right_sz, 0, 6), "\n",
        "   .even_right_bat_sz: ", str(_wall_spec.even_right_bat_sz, 0, 6), "\n",
        "   .odd_left_sz: ", str(_wall_spec.odd_left_sz, 0, 6), "\n",
        "   .odd_left_bat_sz: ", str(_wall_spec.odd_left_bat_sz, 0, 6), "\n",
        "   .odd_right_sz: ", str(_wall_spec.odd_right_sz, 0, 6), "\n"
    )
    
    _wall_spec
#end

// End Brick_stretcher_bond_wall_spec_create
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_stretcher_bond_*_index_fn(WallSpec)
//
//      returns function(x,y,z) that returns an integer index
//
// These macros create functions that determine the brick offset from the
// lower, left corner of the wall.
//
#macro Brick_stretcher_bond_x_index_fn(WallSpec)
    #local _bsbxi_y_index_fn    = Brick_stretcher_bond_y_index_fn(WallSpec)
    
    #local _stretcher_sz        = WallSpec.brick_spec.unit_sz.x;
    #local _bsbxi_even_index_fn = function(x,y,z) {
        #if (WallSpec.even_left_sz > 0)
            #local _left_x_max      = WallSpec.even_left_sz;
            #local _middle_x_max    = WallSpec.sz.x - (WallSpec.even_right_bat_sz + WallSpec.even_right_sz);
            #local _middle_x_sz     = _middle_x_max - _left_x_max;
            #local _middle_count    = int(_middle_x_sz/WallSpec.brick_spec.unit_sz.x);
            select(x - _left_x_max,
                0,
                select(x - _middle_x_max,
                    1 + f_unit_index(x-_left_x_max, _stretcher_sz),
                    #if (WallSpec.even_right_bat_sz > 0)
                        #local _rbat_x_max      = _middle_x_max + WallSpec.even_right_bat_sz;
                    select(x - _rbat_x_max,
                        1 + _middle_count,
                        2 + _middle_count
                    )
                    #else
                    1 + _middle_count
                    #end
                )
            )    
        #else
        f_unit_index(x,_stretcher_sz)
        #end    
    }
    
    #local _bsbxi_odd_index_fn  = function(x,y,z) {
        #local _left_x_max      = WallSpec.odd_left_sz;
        #local _middle_x_max    = WallSpec.sz.x - (WallSpec.odd_left_sz + WallSpec.odd_left_bat_sz + WallSpec.odd_right_sz);
        #local _middle_x_sz     = _middle_x_max - _left_x_max;
        #local _middle_count    = int(_middle_x_sz/WallSpec.brick_spec.unit_sz.x);
        select(x - _left_x_max,
            0,
            #if (WallSpec.odd_left_bat_sz > 0)
                #local _left_bat_x_max  = _left_x_max + WallSpec.odd_left_bat_sz;
            select(x - _left_bat_x_max,
                1,
                2 + f_unit_index(x - _left_bat_x_max, _stretcher_sz)
            )    
            #else
                1 + f_unit_index(x - _left_x_max, _stretcher_sz)
            #end
        )    
    }
    
    #local _parity              = WallSpec.course_parity;
    function(x,y,z) {
        select(
            mod(_bsbxi_y_index_fn(x,y,z)+_parity,2) - 0.5,
            _bsbxi_even_index_fn(x,y,z),
            _bsbxi_odd_index_fn(x,y,z)
        )        
    }
#end

#macro Brick_stretcher_bond_y_index_fn(WallSpec)
    #local _unit    = WallSpec.brick_spec.unit_sz.y;
    function(x,y,z) {
        f_unit_index(y,_unit)
    }
#end

#macro Brick_stretcher_bond_z_index_fn(WallSpec)
    #local _unit    = WallSpec.brick_spec.unit_sz.z;
    function(x,y,z) {
        f_unit_index(z,_unit)
    }    
#end

// End Brick_stretcher_bond_*_index_fn(WallSpec)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_stretcher_bond_*_offset_fn(WallSpec)
//      returns a function(x,y,z) that computes the offset from <x,y,z> to the
//      front, bottom, left corner of the nearest brick
//
#macro Brick_stretcher_bond_x_offset_fn(WallSpec)
    #local _bsbxo_y_index_fn    = Brick_stretcher_bond_y_index_fn(WallSpec)
    
    #local _stretcher_sz            = WallSpec.brick_spec.unit_sz.x;
    #local _bsbxo_even_offset_fn    = function(x,y,z) {
        #if (WallSpec.even_left_sz > 0)
            #local _left_x_max      = WallSpec.even_left_sz;
            #local _middle_x_max    = WallSpec.sz.x - (WallSpec.even_right_bat_sz + WallSpec.even_right_sz);
            #local _middle_x_sz     = _middle_x_max - _left_x_max;
            select(x - _left_x_max,
                x,
                select(x - _middle_x_max,
                    f_unit_offset(x-_left_x_max, _stretcher_sz),
                    #if (WallSpec.even_right_bat_sz > 0)
                        #local _rbat_x_max      = _middle_x_max + WallSpec.even_right_bat_sz;
                    select(x - _rbat_x_max,
                        x - _middle_x_max,
                        x - _rbat_x_max
                    )
                    #else
                    x - _middle_x_max
                    #end
                )
            )    
        #else
        f_unit_offset(x,_stretcher_sz)
        #end    
    }
    
    #local _bsbxo_odd_offset_fn = function(x,y,z) {
        #local _left_x_max      = WallSpec.odd_left_sz;
        select(x - _left_x_max,
            x,
            #if (WallSpec.odd_left_bat_sz > 0)
                #local _left_bat_x_max  = _left_x_max + WallSpec.odd_left_bat_sz;
            select(x - _left_bat_x_max,
                x - _left_x_max,                                    
                f_unit_offset(x - _left_bat_x_max, _stretcher_sz)
            )    
            #else
                f_unit_offset(x - _left_x_max, _stretcher_sz)
            #end
        )    
    }
    
    #local _parity              = WallSpec.course_parity;
    function(x,y,z) {
        select(
            mod(_bsbxo_y_index_fn(x,y,z)+_parity,2) - 0.5,
            _bsbxo_even_offset_fn(x,y,z),
            _bsbxo_odd_offset_fn(x,y,z)
        )        
    }
#end

#macro Brick_stretcher_bond_y_offset_fn(WallSpec)
    #local _unit    = WallSpec.brick_spec.unit_sz.y;
    function(x,y,z) {
        f_unit_offset(y,_unit)
    }    
#end

#macro Brick_stretcher_bond_z_offset_fn(WallSpec)
    #local _unit    = WallSpec.brick_spec.unit_sz.z;
    function(x,y,z) {
        f_unit_offset(z,_unit)
    }    
#end

// End Brick_stretcher_bond_*_offset_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_stretcher_bond_wall_bricks_fn(WallSpec)
//
 
#macro Brick_stretcher_bond_wall_bricks_fn(WallSpec) 
    #local _max_x       = WallSpec.sz.x;
    #local _max_y       = WallSpec.sz.y;
    #local _max_z       = WallSpec.sz.z;
    
    #local _bsbwb_xi_fn = Brick_stretcher_bond_x_index_fn(WallSpec)
    #local _bsbwb_yi_fn = Brick_stretcher_bond_y_index_fn(WallSpec)
    #local _bsbwb_zi_fn = Brick_stretcher_bond_z_index_fn(WallSpec)
    
    #local _bsbwb_xo_fn = Brick_stretcher_bond_x_offset_fn(WallSpec)
    #local _bsbwb_yo_fn = Brick_stretcher_bond_y_offset_fn(WallSpec)
    #local _bsbwb_zo_fn = Brick_stretcher_bond_z_offset_fn(WallSpec)
    
    #local _bsbwb_min_x_fn    = function(yi) {
        #if (WallSpec.left_end = Brick_wall_end_type_corner)
            #local _odd_left_space  = WallSpec.odd_left_sz;
        select(mod(yi+WallSpec.course_parity,2) - 0.5,
            0,
            _odd_left_space
        )    
        #else
        0
        #end        
    }
    
    #local _bsbwb_max_x_fn    = function(yi) {
        #if (WallSpec.right_end = Brick_wall_end_type_corner)
            #local _odd_right_sz = WallSpec.odd_right_sz;
        select(mod(yi+WallSpec.course_parity,2) - 0.5,
            _max_x,
            _max_x - _odd_right_sz
        )    
        #else
        _max_x
        #end
    }
    
    #local _bsbwb_boundary_fn = function(x,y,z,xi,yi,zi) {
        max(
            _bsbwb_min_x_fn(yi) - x,
            x - _bsbwb_max_x_fn(yi),
            -y,
            y - _max_y/*,
            -z,
            z - _max_z*/
        )    
    }
    
    #local _brick_y_offset      = <0, WallSpec.brick_spec.mortar_sz, 0>;
    #local _bsbwb_stretcher_fn  = Translate_fn(WallSpec.brick_spec.shape_fn, _brick_y_offset)
    
    #if (WallSpec.even_left_sz > 0)
        #local _bsbwb_even_left_brick_spec  = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_left_sz - WallSpec.brick_spec.mortar_sz);
        #local _bsbwb_even_left_brick_fn    = Translate_fn(_bsbwb_even_left_brick_spec.shape_fn, _brick_y_offset);
        #local _bsbwb_even_right_brick_spec = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_right_sz);
        #local _bsbwb_even_right_brick_fn   = Translate_fn(_bsbwb_even_right_brick_spec.shape_fn, _brick_y_offset);
        #if (WallSpec.even_right_bat_sz > 0)
            #local _bsbwb_even_right_bat_brick_spec = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_right_bat_sz - WallSpec.brick_spec.mortar_sz);
            #local _bsbwb_even_right_bat_brick_fn   = Translate_fn(_bsbwb_even_right_bat_brick_spec.shape_fn, _brick_y_offset);
        #end 
    #end
    
    #local _bsbwb_even_fn   = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        #if (WallSpec.even_left_sz > 0)
            #local _left_x_max      = WallSpec.even_left_sz;
            #local _middle_x_max    = WallSpec.sz.x - (WallSpec.even_right_bat_sz + WallSpec.even_right_sz);
            #local _middle_x_sz     = _middle_x_max - _left_x_max;
            select(x - _left_x_max,
                _bsbwb_even_left_brick_fn(xo,yo,zo),
                select(x - _middle_x_max,
                    _bsbwb_stretcher_fn(xo,yo,zo),
                    #if (WallSpec.even_right_bat_sz > 0)
                        #local _rbat_x_max      = _middle_x_max + WallSpec.even_right_bat_sz;
                    select(x - _rbat_x_max,
                        _bsbwb_even_right_bat_brick_fn(xo,yo,zo),
                        _bsbwb_even_right_brick_fn(xo,yo,zo)
                    )
                    #else
                    _bsbwb_even_right_brick_fn(xo,yo,zo)
                    #end
                )
            )    
        #else
        _bsbwb_stretcher_fn(xo,yo,zo)
        #end    
    }
    
    #local _bsbwb_odd_left_brick_spec   = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_left_sz - WallSpec.brick_spec.mortar_sz);
    #local _bsbwb_odd_left_brick_fn     = Translate_fn(_bsbwb_odd_left_brick_spec.shape_fn, _brick_y_offset);
    #if (WallSpec.odd_left_bat_sz > 0)
        #local _bsbwb_odd_left_bat_brick_spec   = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_left_bat_sz - WallSpec.brick_spec.mortar_sz);
        #local _bsbwb_odd_left_bat_brick_fn     = Translate_fn(_bsbwb_odd_left_bat_brick_spec.shape_fn, _brick_y_offset); 
    #end
    #local _bsbwb_odd_right_brick_spec  = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_right_sz);
    #local _bsbwb_odd_right_brick_fn    = Translate_fn(_bsbwb_odd_right_brick_spec.shape_fn, _brick_y_offset);
    
    #local _bsbwb_odd_fn    = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        #local _left_x_max      = WallSpec.odd_left_sz;
        #local _middle_x_max    = WallSpec.sz.x - WallSpec.odd_right_sz;
        #local _middle_x_sz     = _middle_x_max - _left_x_max;
        select(x - _left_x_max,
            _bsbwb_odd_left_brick_fn(xo,yo,zo),
            #if (WallSpec.odd_left_bat_sz > 0)
                #local _left_bat_x_max  = _left_x_max + WallSpec.odd_left_bat_sz;
            select(x - _left_bat_x_max,
                _bsbwb_odd_left_bat_brick_fn(xo,yo,zo),
                select(x - _middle_x_max,                                    
                    _bsbwb_stretcher_fn(xo,yo,zo),
                    _bsbwb_odd_right_brick_fn(xo,yo,zo)
                )    
            )    
            #else
            select(x - _middle_x_max,
                _bsbwb_stretcher_fn(xo,yo,zo),
                _bsbwb_odd_right_brick_fn(xo,yo,zo)
            )        
            #end
        )    
    }
    
    #local _bsbwb_shape_fn  = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        max(
            _bsbwb_boundary_fn(x,y,z,xi,yi,z),
            select(mod(yi+WallSpec.course_parity,2) - 0.5,
                _bsbwb_even_fn(x,y,z,xi,yi,zi,xo,yo,zo),
                _bsbwb_odd_fn(x,y,z,xi,yi,zi,xo,yo,zo)
            )
        )        
    }
    
    function(x,y,z) {
        _bsbwb_shape_fn(x, y, z,
            _bsbwb_xi_fn(x,y,z),
            _bsbwb_yi_fn(x,y,z),
            _bsbwb_zi_fn(x,y,z),
            _bsbwb_xo_fn(x,y,z),
            _bsbwb_yo_fn(x,y,z),
            _bsbwb_zo_fn(x,y,z)
        )     
    }
#end

// End Brick_stretcher_bond_wall_bricks_fn
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Brick_stretcher_bond_wall_mortar_fn(WallSpec)
//
// TODO: This could be a general brick function rather than bond specific

#macro Brick_stretcher_bond_wall_mortar_fn(WallSpec) 
    #local _max_x       = WallSpec.sz.x;
    #local _max_y       = WallSpec.sz.y;
    #local _max_z       = WallSpec.sz.z;
    
    #local _bsbwm_xi_fn = Brick_stretcher_bond_x_index_fn(WallSpec)
    #local _bsbwm_yi_fn = Brick_stretcher_bond_y_index_fn(WallSpec)
    #local _bsbwm_zi_fn = Brick_stretcher_bond_z_index_fn(WallSpec)
    
    #local _bsbwm_xo_fn = Brick_stretcher_bond_x_offset_fn(WallSpec)
    #local _bsbwm_yo_fn = Brick_stretcher_bond_y_offset_fn(WallSpec)
    #local _bsbwm_zo_fn = Brick_stretcher_bond_z_offset_fn(WallSpec)
    
    #local _bsbwm_min_x_fn    = function(yi) {
        #if (WallSpec.left_end = Brick_wall_end_type_corner)
            #local _odd_left_space  = WallSpec.odd_left_sz;
        select(mod(yi+WallSpec.course_parity,2) - 0.5,
            0,
            _odd_left_space
        )    
        #else
        0
        #end        
    }
    
    #local _bsbwm_max_x_fn    = function(yi) {
        #if (WallSpec.right_end = Brick_wall_end_type_corner)
            #local _odd_right_sz = WallSpec.odd_right_sz;
        select(mod(yi+WallSpec.course_parity,2) - 0.5,
            _max_x,
            _max_x - _odd_right_sz
        )    
        #else
        _max_x
        #end
    }
    
    #local _bsbwm_boundary_fn = function(x,y,z,xi,yi,zi) {
        max(
            _bsbwm_min_x_fn(yi) - x,
            x - _bsbwm_max_x_fn(yi),
            -y,
            y - _max_y,
            -z,
            z - _max_z
        )    
    }
    
    #local _bsbwm_stretcher_mortar_fn   = Brick_wall_mortar_shape_fn(WallSpec,WallSpec.brick_spec)
    
    #if (WallSpec.even_left_sz > 0)
        #local _bsbwm_even_left_brick_spec  = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_left_sz - WallSpec.brick_spec.mortar_sz);
        #local _bsbwm_even_left_mortar_fn   = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_even_left_brick_spec)
        
        #local _bsbwm_even_right_brick_spec = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_right_sz);
        #local _bsbwm_even_right_mortar_fn  = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_even_right_brick_spec)
        #if (WallSpec.even_right_bat_sz > 0)
            #local _bsbwm_even_right_bat_brick_spec = Brick_spec_bat(WallSpec.brick_spec, WallSpec.even_right_bat_sz - WallSpec.brick_spec.mortar_sz);
            #local _bsbwm_even_right_bat_mortar_fn  = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_even_right_bat_brick_spec)
        #end 
    #end
    
    #local _bsbwm_even_fn   = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        #if (WallSpec.even_left_sz > 0)
            #local _left_x_max      = WallSpec.even_left_sz;
            #local _middle_x_max    = WallSpec.sz.x - (WallSpec.even_right_bat_sz + WallSpec.even_right_sz);
            #local _middle_x_sz     = _middle_x_max - _left_x_max;
            select(x - _left_x_max,
                _bsbwm_even_left_mortar_fn(xo,yo,zo),
                select(x - _middle_x_max,
                    _bsbwm_stretcher_mortar_fn(xo,yo,zo),
                    #if (WallSpec.even_right_bat_sz > 0)
                        #local _rbat_x_max      = _middle_x_max + WallSpec.even_right_bat_sz;
                    select(x - _rbat_x_max,
                        _bsbwm_even_right_bat_mortar_fn(xo,yo,zo),
                        _bsbwm_even_right_mortar_fn(xo,yo,zo)
                    )
                    #else
                    _bsbwm_even_right_mortar_fn(xo,yo,zo)
                    #end
                )
            )    
        #else
        _bsbwm_stretcher_mortar_fn(xo,yo,zo)
        #end    
    }
    
    #local _bsbwm_odd_left_brick_spec   = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_left_sz - WallSpec.brick_spec.mortar_sz);
    #local _bsbwm_odd_left_mortar_fn    = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_odd_left_brick_spec)
    
    #if (WallSpec.odd_left_bat_sz > 0)
        #local _bsbwm_odd_left_bat_brick_spec   = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_left_bat_sz - WallSpec.brick_spec.mortar_sz);
        #local _bsbwm_odd_left_bat_mortar_fn    = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_odd_left_bat_brick_spec)
    #end
    #local _bsbwm_odd_right_brick_spec  = Brick_spec_bat(WallSpec.brick_spec, WallSpec.odd_right_sz);
    #local _bsbwm_odd_right_mortar_fn   = Brick_wall_mortar_shape_fn(WallSpec,_bsbwm_odd_right_brick_spec)
    
    #local _bsbwm_odd_fn    = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        #local _left_x_max      = WallSpec.odd_left_sz;
        #local _middle_x_max    = WallSpec.sz.x - WallSpec.odd_right_sz;
        #local _middle_x_sz     = _middle_x_max - _left_x_max;
        select(x - _left_x_max,
            _bsbwm_odd_left_mortar_fn(xo,yo,zo),
            #if (WallSpec.odd_left_bat_sz > 0)
                #local _left_bat_x_max  = _left_x_max + WallSpec.odd_left_bat_sz;
            select(x - _left_bat_x_max,
                _bsbwm_odd_left_bat_mortar_fn(xo,yo,zo),
                select(x - _middle_x_max,                                    
                    _bsbwm_stretcher_mortar_fn(xo,yo,zo),
                    _bsbwm_odd_right_mortar_fn(xo,yo,zo)
                )    
            )    
            #else
            select(x - _middle_x_max,
                _bsbwm_stretcher_mortar_fn(xo,yo,zo),
                _bsbwm_odd_right_mortar_fn(xo,yo,zo)
            )        
            #end
        )    
    }
    
    #local _bsbwm_shape_fn  = function(x,y,z,xi,yi,zi,xo,yo,zo) {
        max(
            _bsbwm_boundary_fn(x,y,z,xi,yi,zi),
            select(mod(yi+WallSpec.course_parity,2) - 0.5,
                _bsbwm_even_fn(x,y,z,xi,yi,zi,xo,yo,zo),
                _bsbwm_odd_fn(x,y,z,xi,yi,zi,xo,yo,zo)
            )
        )        
    }
    
    function(x,y,z) {
        _bsbwm_shape_fn(x, y, z,
            _bsbwm_xi_fn(x,y,z),
            _bsbwm_yi_fn(x,y,z),
            _bsbwm_zi_fn(x,y,z),
            _bsbwm_xo_fn(x,y,z),
            _bsbwm_yo_fn(x,y,z),
            _bsbwm_zo_fn(x,y,z)
        )     
    }
#end

// End Brick_stretcher_bond_wall_mortar_fn
//-----------------------------------------------------------------------------

// End Stretcher Bond Walls
//=============================================================================

#version Libbricks_Inc_Temp;
#end // ifndef(Libbricks_Inc_Temp)